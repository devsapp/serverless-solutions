edition: 1.0.0          #  命令行YAML规范版本，遵循语义化版本（Semantic Versioning）规范。
name: sink-connect-framework     #  项目名称。
access: default         #  密钥别名。

vars:
  service:
    name: "{{serviceName}}"
    description: 'neo4j sink connect service'
    internetAccess: true
    role:
    logConfig: auto
    vpcConfig: # VPC配置, 配置后function可以访问指定VPC
      vpcId: "{{vpcId}}"              # VPC ID
      securityGroupId: "{{securityGroupId}}"    # 安全组ID
      vswitchIds: # 交换机 ID 列表
        - "{{vswitchIds}}"
  sinkfunction:
    name: sink
    description: 'this is serverless sink connect framework sink function'
    codeUri: './sink'
    handler: 'index.handler'
    environmentVariables: ${vars.sinkEnv}
    memorySize: 256
    initializer: 'index.initialize'
    initializationTimeout: 10
    instanceLifecycleConfig:
      preStop:
        handler: 'index.destroy'
        timeout: 3
    runtime: python3.9
    timeout: 600
  sinkEnv:
    SINK_CONFIG: '{"eventSchema": "{{eventSchema}}","batchOrNot": "{{batchOrNot}}","host": "{{host}}","port": "{{port}}","user": "{{user}}","password": "{{password}}"}'


services:
  source: # 服务名称
    component: devsapp/fc  # 组件名称
    props: #  组件的属性值。
      region: "{{region}}"
      service: ${vars.service}
      function: ${vars.sinkfunction}
      triggers:
        - name: eventbridgeTriggerWithKafkaSource
          type: eventbridge
          config:
            triggerEnable: true
            asyncInvocationType: true
            eventRuleFilterPattern: "{}"
            eventSinkConfig:
              deliveryOption:
                mode: event-streaming
            eventSourceConfig:
              eventSourceType: Kafka
              eventSourceParameters:
                sourceKafkaParameters:
                  RegionId: "{{region}}"
                  InstanceId: "{{instanceId}}" # 需要提前创建
                  Topic: "{{topicName}}" # 需要提前创建
                  ConsumerGroup: "{{consumerGroup}}" # 需要提前创建
                  OffsetReset: "{{offsetReset}}" # latest or earliest

  sink: #  服务名称。
    component: devsapp/fc  # 组件名称。
    actions:
      pre-deploy: # 在deploy之前运行
        - run: s build --use-docker     # 要执行的系统命令，类似于一种钩子的形式
          path: ./
    props: #  组件的属性值。
      region: "{{region}}"
      service: ${vars.service}
      function: ${vars.sinkfunction}